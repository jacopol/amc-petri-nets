#ifndef PNML_H
#define PNML_H

#include <filesystem>
#include <iostream>
#include <set>
#include <string>
#include <vector>

#include <pugixml.hpp>

////////////////////////////////////////////////////////////////////////////////
/// \brief Parser for PNML files.
////////////////////////////////////////////////////////////////////////////////
class pnml
{
public:
  //////////////////////////////////////////////////////////////////////////////
  /// \brief Type for sizes of values.
  //////////////////////////////////////////////////////////////////////////////
  using size_type = int;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Type for identifying a place or transition.
  //////////////////////////////////////////////////////////////////////////////
  using id_type = int;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief A collection of place identifiers constitute a marking.
  //////////////////////////////////////////////////////////////////////////////
  using marking_type = std::set<id_type>;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Pair of pre-conditional and post-conditional markings combine into
  ///        a single transition.
  //////////////////////////////////////////////////////////////////////////////
  using transition_type = std::pair<const marking_type&, const marking_type&>;

private:
  //////////////////////////////////////////////////////////////////////////////
  /// \brief Number of places.
  //////////////////////////////////////////////////////////////////////////////
  size_type _places = 0;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Original names for each place in the PNML file.
  //////////////////////////////////////////////////////////////////////////////
  std::vector<std::string> _place_names;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Places that have a non-empty initial marking.
  //////////////////////////////////////////////////////////////////////////////
  marking_type _place_initial;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Number of transitions.
  //////////////////////////////////////////////////////////////////////////////
  size_type _transitions = 0;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Set of places as pre-condition to a transition.
  //////////////////////////////////////////////////////////////////////////////
  std::vector<marking_type> _transition_pre;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Set of places as post-condition to a transition.
  //////////////////////////////////////////////////////////////////////////////
  std::vector<marking_type> _transition_post;

public:
  //////////////////////////////////////////////////////////////////////////////
  /// \brief Parse a PNML from an input stream
  //////////////////////////////////////////////////////////////////////////////
  pnml(std::istream &is);

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Parse a file at the given path.
  //////////////////////////////////////////////////////////////////////////////
  pnml(const std::filesystem::path &path);

public:
  //////////////////////////////////////////////////////////////////////////////
  /// \brief Number of places in PNML file.
  //////////////////////////////////////////////////////////////////////////////
  size_type
  places() const;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Initially marked places.
  //////////////////////////////////////////////////////////////////////////////
  const marking_type&
  initial() const;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Number of transitions in PNML file.
  //////////////////////////////////////////////////////////////////////////////
  size_type
  transitions() const;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Number of transitions in PNML file.
  //////////////////////////////////////////////////////////////////////////////
  transition_type
  transition(const id_type &t) const;

  //////////////////////////////////////////////////////////////////////////////
  /// \brief Create string of PNML file for debugging purposes.
  //////////////////////////////////////////////////////////////////////////////
  std::string
  to_string() const;

private:
  //////////////////////////////////////////////////////////////////////////////
  void
  parse_pnml(pugi::xml_document &doc);
};

#endif // PNML_H
