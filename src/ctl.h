#ifndef CTL_H
#define CTL_H

#include <vector>
#include <bdd.h>

////////////////////////////////////////////////////////////////////////////////
/// \brief Initialize the CTL module. Should be called before calling CTL operators
///
/// \param transitions Vector (i.e. an array) of each individual transition.
////////////////////////////////////////////////////////////////////////////////
void
init_CTL(const std::vector<bdd_transition>& transitions);

/////////////////////////////////////////////////////////////////////////////////
/// \brief Can be used to declare another fairness constraint (optional)
/////////////////////////////////////////////////////////////////////////////////
void
fairness_constraint(const bdd& constraint);

////////////////////////////////////////////////////////////////////////////////
/// \brief Computes set of states for where this place is marked
///
/// \param place A place in the Petri Net. Recall: place n corresponds to variable 2*n
////////////////////////////////////////////////////////////////////////////////
bdd
ATOM(int place);

////////////////////////////////////////////////////////////////////////////////
/// \brief Computes the set of states satisfying "NOT phi"
////////////////////////////////////////////////////////////////////////////////
bdd
NOT(const bdd& phi);

////////////////////////////////////////////////////////////////////////////////
/// \brief Computes set of states satisfying "phi AND psi"
////////////////////////////////////////////////////////////////////////////////
bdd
AND(const bdd& phi, const bdd& psi);

////////////////////////////////////////////////////////////////////////////////
/// \brief Computes set of states satisfying "phi OR psi"
////////////////////////////////////////////////////////////////////////////////
bdd
OR(const bdd& phi, const bdd& psi);

////////////////////////////////////////////////////////////////////////////////
/// \brief Computes set of states satisfying "EX phi" (neXt)
////////////////////////////////////////////////////////////////////////////////
bdd
EX(const bdd& phi);

////////////////////////////////////////////////////////////////////////////////
/// \brief Computes set of states satisfying "EF phi" (Future)
////////////////////////////////////////////////////////////////////////////////
bdd
EF(const bdd& phi);

////////////////////////////////////////////////////////////////////////////////
/// \brief Computes set of states satisfying "EG phi" (Globally)
////////////////////////////////////////////////////////////////////////////////
bdd
EG(const bdd& phi);

////////////////////////////////////////////////////////////////////////////////
/// \brief Computes set of states satisfying "E[phi U psi]" (strong until)
////////////////////////////////////////////////////////////////////////////////
bdd
EU(const bdd& phi, const bdd& psi);

// Corresponding CTL operators with universal path quantifiers

bdd AX(const bdd& phi);
bdd AF(const bdd& phi);
bdd AG(const bdd& phi);
bdd AU(const bdd& phi, const bdd& psi);

#endif // CTL_H
